services:
  app:
    build:
      context: .
      dockerfile: config/app.Dockerfile
      platforms:
        - "linux/amd64"
      args:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    container_name: brick-mail-app
    env_file:
      - .env.production.local
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - APP_DOMAIN=${COOLIFY_URL}
      # - RESEND_API_KEY=${RESEND_API_KEY}
      # - RESEND_AUDIENCE_ID=${RESEND_AUDIENCE_ID}
      - TSX_COMPILE=true
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ./apps/web/locales:/app/apps/web/locales
      - ./apps/server/public:/app/apps/server/public
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - brick-mail-network
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${APP_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:16-alpine3.19
    container_name: brick-mail-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - brick-mail-network
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: brick-mail-redis
    ports:
      - '6379:6379'
    command: [ "redis-server" ]
    # --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - redis_data:/data
    networks:
      - brick-mail-network
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:


networks:
  brick-mail-network:
    driver: bridge
